/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return build(preorder, 0, preorder.size()-1, inorder, 0, inorder.size()-1);
    }

    TreeNode* build(vector<int>& preorder, int preorder_start, int preorder_end, vector<int>& inorder, int inorder_start, int inorder_end){
        
        if(preorder_start > preorder_end || inorder_start > inorder_end)
            return nullptr;
        
        int root_value = preorder[preorder_start];
        int index = 0;

        for(int i = inorder_start;i <= inorder_end; i++){
            if(inorder[i] == root_value){
                index = i;
                break;
            }
        }

        int leftSize = index - inorder_start;

        TreeNode* root = new TreeNode(root_value);
        root->left = build(preorder, preorder_start + 1, preorder_start + leftSize, inorder, inorder_start, index - 1);
        root->right = build(preorder, preorder_start + leftSize + 1, preorder_end, inorder, index + 1, inorder_end);

        return root;
    }
};
